{"version":3,"sources":["assets/seflogo.png","Constants/baseurl.js","Services/apiService.js","Services/mainService.js","Pages/Login.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["baseurl","api","method","url","data","token","undefined","param","toLowerCase","Axios","headers","params","then","res","catch","error","console","log","response","mainService","service","username","password","Login","useState","email","user","setUser","handleInput","evt","obj","target","name","value","Container","className","Row","Col","md","Card","Img","variant","src","SefLogo","Body","Form","onSubmit","preventDefault","err","alert","Group","controlId","Label","Control","type","placeholder","onChange","Text","Button","size","App","path","element","index","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.16ab708f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/seflogo.c9928860.png\";","\r\n//live api server \r\nexport const baseurl = \"https://mnecell.sef.org.pk/api/?\"\r\n","\nimport Axios from \"axios\";\nimport { baseurl } from \"../Constants/baseurl\";\n\nexport const api = {\n\n    invoke: function (method, url, data, token = undefined) {\n        let param = null;\n        if (method.toLowerCase()==\"get\") {param=data;data=null;}\n        return Axios({\n            url: baseurl + url,\n            // baseURL: baseurl,\n            headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'x-access-token': token\n                },\n\n            method: method,\n            params:param,\n            data\n        }\n        )\n        .then(res => res)\n        .catch(error => {\n            console.log(\"error\", error);\n            return error.response;\n        })\n    },\n    getQueryStringOfObject: function (obj, prefix) {\n        var str = [],\n            p;\n        for (p in obj) {\n            if (obj.hasOwnProperty(p)) {\n                var k = prefix ? prefix + \"[\" + p + \"]\" : p,\n                    v = obj[p];\n                str.push((v !== null && typeof v === \"object\") ?\n                    this.getQueryStringOfObject(v, k) :\n                    encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\n            }\n        }\n        return str.join(\"&\");\n    }\n}","import { api as service } from './apiService';\r\n\r\nexport const mainService = {\r\n\r\n  login: function (data) {\r\n    return service.invoke(\"GET\", `type=Login&u=${data.username}&p=${data.password}`)\r\n  },\r\n  syncDown(token) {\r\n    return service.invoke(\"GET\", `type=SyncDown&token=${token}`)\r\n  },\r\n  syncUp(token, data) {\r\n    const formData = new FormData();\r\n    formData.append(\"answers\", JSON.stringify(data));\r\n    return service.invoke(\"POST\", `type=SyncUp&DataId=4839&token=${token}`, formData)\r\n  },\r\n  saveImage(token, data) {\r\n    const {\r\n      ProgramActivityId,\r\n      SchoolCode,\r\n      ImageId,\r\n      Image\r\n    } = data;\r\n    const formData = new FormData();\r\n    formData.append(\"ProgramActivityId\", ProgramActivityId);\r\n    formData.append(\"SchoolCode\", SchoolCode);\r\n    formData.append(\"ImageId\", ImageId);\r\n    formData.append(\"Image\", Image);\r\n    // formData.append(\"DataId\",DataId);\r\n\r\n    return service.invoke(\"POST\", `type=saveImages&DataId=4839&token=${token}`, formData)\r\n  },\r\n  checkIn(token, data) {\r\n    const {\r\n      ProgramActivityId,\r\n      SchoolCode,\r\n      Latitude,\r\n      Longitude,\r\n      BatteryStatus,\r\n      IMEI,\r\n      Image\r\n    } = data;\r\n    const formData = new FormData();\r\n    formData.append(\"ProgramActivityId\", ProgramActivityId);\r\n    formData.append(\"BatteryStatus\", BatteryStatus);\r\n    formData.append(\"SchoolCode\", SchoolCode);\r\n    formData.append(\"Latitude\", Latitude);\r\n    formData.append(\"Longitude\", Longitude);\r\n    formData.append(\"IMEI\", IMEI);\r\n    formData.append(\"Image\", Image);\r\n    // formData.append(\"DataId\",DataId);\r\n\r\n    return service.invoke(\"POST\", `type=checkIn&token=${token}`, formData)\r\n  }\r\n}","import React, { useState } from 'react'\r\nimport { Row, Col, Button, Container, Form, Card } from 'react-bootstrap';\r\nimport SefLogo from '../assets/seflogo.png';\r\nimport { mainService } from '../Services/mainService';\r\nfunction Login() {\r\n    const [user, setUser] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: ''\r\n    });\r\n    const handleInput = (evt) => {\r\n        setUser(() => {\r\n            let obj = { ...user };\r\n            obj[evt.target.name] = evt.target.value;\r\n            return obj;\r\n        })\r\n    }\r\n\r\n    const onSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        if (!user.username || !user.password) {\r\n            alert(\"Username and Password are required!\");\r\n            return;\r\n        }\r\n        mainService.login(user).then(res=>{\r\n            console.log(\"res\",res);\r\n        },err=>{\r\n            console.log(\"err\",err);\r\n        })\r\n    }\r\n    return (\r\n        <Container className=\"loginpage bg-image\" >\r\n            <Row className=\"d-flex flex-column min-vh-100 justify-content-center align-items-center\">\r\n                <Col md=\"4\">\r\n                    <Card>\r\n                        <Card.Img className=\"bg-image2\" variant=\"top\" src={SefLogo} />\r\n                        <Card.Body>\r\n                            <Form onSubmit={onSubmit}>\r\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control type=\"username\" placeholder=\"Enter username\" value={user.username} name=\"username\" onChange={handleInput} />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        We'll never share your email with anyone else.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" placeholder=\"Password\" value={user.password} name=\"password\" onChange={handleInput} />\r\n                                </Form.Group>\r\n                                {/* <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n                                    <Form.Check type=\"checkbox\" label=\"Remember me\" />\r\n                                </Form.Group> */}\r\n                                <div className=\"d-grid gap-2\">\r\n                                    <Button type=\"submit\" variant=\"success\" size=\"sm\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </div>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport './App.css';\nimport Login from './Pages/Login';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Login />}>\n          <Route index element={<Login />} />\n          {/* <Route path=\"teams\" element={<Teams />}>\n            <Route path=\":teamId\" element={<Team />} />\n            <Route path=\"new\" element={<NewTeamForm />} />\n            <Route index element={<LeagueStandings />} />\n          </Route> */}\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}